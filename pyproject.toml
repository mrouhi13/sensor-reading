[tool.poetry]
name = "sensor-reading-cs"
version = "0.1.0"
description = "Einhundert Case Study"
authors = ["Majid Rouhi <mrouhi13@gmail.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
django = "==5.2a1"
requests = "^2.31.0"
celery = "==5.5.0rc4"
redis = "==5.3.0b4"
djangorestframework = "^3.14.0"
django-filter = "^24.1"
django-celery-results = "^2.5.1"
django-cors-headers = "^4.3.1"


[tool.poetry.group.dev]

[tool.poetry.group.dev.dependencies]
ruff = "==0.9.2"
pytest-django = "^4.8.0"
pytest-xdist = "^3.5.0"
pytest-cov = "==6.0.0"
drf-spectacular = "==0.28.0"
psycopg2-binary = "^2.9.9"


[tool.poetry.group.prod]

[tool.poetry.group.prod.dependencies]
psycopg2 = "^2.9.9"
gunicorn = "==23.0.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
line-length = 80
target-version = "py312"
exclude = [".git", ".git-rewrite", ".pytest_cache", ".ruff_cache", ".tox", ".venv", ".vscode", "__pycache__", ".venv", "migrations"]

[tool.ruff.format]
quote-style = "single"
docstring-code-format = true

[tool.ruff.lint]
select = ["A", "B", "C", "E", "G", "T", "W", "BLE", "DJ", "ERA", "EXE", "FBT", "ICN", "ISC", "NPY", "PD", "PIE", "PL", "PTH", "PYI", "RET", "RSE", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

[tool.ruff.lint.pycodestyle]
max-line-length = 80
max-doc-length = 72

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.coverage.run]
branch = true
source = ["."]
omit = ["**/migrations/*", "**/base/*", "*tests*", "*admin.py", "*manage.py"]

[tool.coverage.report]
show_missing = true
fail_under = 95
precision = 2
skip_covered = true
skip_empty = true
omit = ["**/migrations/*", "**/base/*", "*tests*", "*admin.py", "*manage.py"]


[tool.pytest.ini_options]
addopts = "--cov=. --cov-branch --ds=base.settings -p no:warnings --numprocesses auto --cache-clear --junitxml=xunit-result.xml --cov-report=xml:coverage.xml --cov-report=html"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
